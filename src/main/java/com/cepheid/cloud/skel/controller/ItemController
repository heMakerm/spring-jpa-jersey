package com.cepheid.cloud.skel.controller;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.cepheid.cloud.skel.model.Description;
import com.cepheid.cloud.skel.model.Item;
import com.cepheid.cloud.skel.model.Item.State;
import com.cepheid.cloud.skel.repository.DescriptionRepository;
import com.cepheid.cloud.skel.repository.ItemRepository;

import io.swagger.annotations.Api;


// curl http:/localhost:9443/app/api/1.0/items

@Component
@Path("/api/1.0/items")
@Api()
public class ItemController {

  private final ItemRepository mItemRepository;
  private final DescriptionRepository mDescRepository;

  @Autowired
  public ItemController(ItemRepository itemRepository, DescriptionRepository descriptionRepository) {
    mItemRepository = itemRepository;
    mDescRepository = descriptionRepository;
  }

  @GET
  @Produces(MediaType.APPLICATION_JSON)
  public Collection<Item> getItems() {
    return mItemRepository.findAll();
  }
 
  @GET
  @Produces(MediaType.APPLICATION_JSON)
  @Path("/{id}")
  public Optional<Item> getItem(@PathParam("id") long id) {
    return mItemRepository.findById(id);
  }
  
  @POST
  @Consumes(MediaType.APPLICATION_JSON)
  @Produces(MediaType.APPLICATION_JSON)
  public ResponseEntity<Object> saveItem(Item item) {
    Item saveItem = mItemRepository.save(item);
    if(mItemRepository.findById(saveItem.getId()).isPresent())
    	return ResponseEntity.accepted().body("Item created successfully");
    else
    	return ResponseEntity.unprocessableEntity().body("Item creation failed");
  }//https://github.com/rxdevcepheid/spring-skel
  
  @PUT
  @Consumes(MediaType.APPLICATION_JSON)
  @Produces(MediaType.APPLICATION_JSON)
  @Path("/{id}")
  public ResponseEntity<Object> updateItem(@PathParam("id") long id,Item item) {
	  if(!mItemRepository.findById(id).isPresent()) {
		  return ResponseEntity.     notFound().build();
	  }
	  Item itmm= mItemRepository.findById(id).get();	  
	  itmm.setName(item.getName());
	  itmm.setState(item.getState());
	  for(Description desc : item.getDescription()) {		 
		  itmm.getDescription().forEach(d -> {if(d.getDescId().equals(desc.getDescId())) {
			  	d.setDesc(desc.getDesc());
			  }
		  });
	  }
	  Item updateItem = mItemRepository.save(itmm);
	  if(mItemRepository.findById(updateItem.getId()).isPresent())
	    	return ResponseEntity.accepted().body("Item updated successfully");
	    else
	    	return ResponseEntity.unprocessableEntity().body("Item updation failed");
  }
  
  @DELETE
  @Path("/delete/{id}")
  public void deleteItem(@PathParam("id") long id) {
     mItemRepository.deleteById(id);
  }
  
  @GET
  @Produces(MediaType.APPLICATION_JSON)
  @Path("/findItemByName/{name}")
  public Item findItemByName(@PathParam("name") String name) {
     return mItemRepository.findItemByName(name);
  }
  
  @GET
  @Produces(MediaType.APPLICATION_JSON)
  @Path("/findItemByState/{state}")
  public Item findItemByState(@PathParam("state") String state) {
     return mItemRepository.findItemByState(State.valueOf(state));
  }
  
  @GET
  @Produces(MediaType.APPLICATION_JSON)
  @Path("/findDescForItem/{id}")
  public List<Description> findDescForItem(@PathParam("id") long id) {
     return mDescRepository.findDescForItem(id);
  }
  
}
